const path = require("path");
const webpack = require("webpack");


const appLocales = {
  en: {
    path: "en",
    locale: "English",
    default: true,
  },
};

exports.onCreatePage = async ({ page, actions }) => {
  const { createPage, deletePage } = actions;

  Object.keys(appLocales).forEach(async (locale) => {
    const newPage = {
      ...page,
      context: {locale},
      path: appLocales[locale].default ? page.path : appLocales[locale].path + page.path,
    };
    await createPage(newPage);
  })
};

exports.onCreateWebpackConfig = ({ plugins, actions }) => {
    actions.setWebpackConfig({
      devtool: "source-map",
      plugins: [
        plugins.provide({ process: "process/browser" }),
        new webpack.ProvidePlugin({
          Buffer: ["buffer", "Buffer"],
        }),
        new webpack.SourceMapDevToolPlugin({
          filename: "[file].map",
          publicPath: process.env.BASE_URL,
        }),
      ],
      resolve: {
        alias: {
          react: path.resolve("./node_modules/react"),
          "process/browser": path.resolve("./node_modules/process/browser"),
          buffer: path.resolve("./node_modules/buffer"),
          "react-toast-notifications": path.resolve(
            "./node_modules/react-toast-notifications"
          ),
          "@reach/router": path.resolve("./node_modules/@gatsbyjs/reach-router"),
        },
      },
    });
  };